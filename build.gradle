group 'com.argiope'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath ('com.bluepapa32:gradle-watch-plugin:0.1.3',
                    "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.3"
        )
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'watch'
/*apply plugin: "com.arenagod.gradle.MybatisGenerator"*/


sourceCompatibility = 1.8
targetCompatibility = 1.8

//统一编码为utf-8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral();
    maven {
        url  'https://mvnrepository.com/'
    }

}
/*configurations {
    mybatisGenerator
}

mybatisGenerator {
    verbose = true
    configFile = 'src/main/resources/generatorConfig.xml'
}*/
ext{
    springVersion = '4.1.6.RELEASE'
    mybatisVersion = '3.4.1'
    jsonVersion = '1.9.13'
}

ext.libraries = [
        //spring相关jar包
        spring:[
                "org.springframework:spring-tx:$springVersion",
                "org.springframework:spring-oxm:$springVersion",
                "org.springframework:spring-webmvc:$springVersion",
                "org.springframework:spring-context-support:$springVersion"

        ],
        //mybatis核心包
        mybatis:[
                'org.mybatis:mybatis-spring:1.3.0',
                "org.mybatis:mybatis:$mybatisVersion"
        ],
        druid:[
                'com.alibaba:druid:1.0.25'
        ],
        javaee:[
                'javax:javaee-api:7.0',
                'javax.servlet:jstl:1.2'
        ],
        //日志管理及格式化
        log:[
                'log4j:log4j:1.2.17',
                'com.alibaba:fastjson:1.2.17',
                'org.slf4j:slf4j-log4j12:1.7.7'
        ],
        //Json映射相关jar
        json:[
                "org.codehaus.jackson:jackson-core-asl:$jsonVersion",
                "org.codehaus.jackson:jackson-mapper-asl:$jsonVersion"
        ],
        //commons上传组件
        commons:[
                'commons-io:commons-io:2.5',
                'commons-codec:commons-codec:1.10',
                'commons-fileupload:commons-fileupload:1.3.2'
        ],
        validator:[
                'org.hibernate:hibernate-validator:5.2.4.Final',
                'javax.validation:validation-api:1.1.0.Final'
        ]
]

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'


    //环境编译
    compile (libraries.spring,
            libraries.mybatis,
            libraries.druid,
            libraries.javaee,
            libraries.log,
            libraries.json,
            libraries.commons,
            libraries.validator,
            'mysql:mysql-connector-java:5.1.39',
            /*跨域过滤器jar*/
            'com.thetransactioncompany:cors-filter:2.5',
            'org.apache.bval:bval-jsr303:0.5',
            //导入本地的依赖包
            fileTree(dir: 'libs', include: ['*.jar'])
    )
    compile 	group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.2'
}

// Embeded Jetty for testing
jettyRun {
    println "version $version"
    println 'jetty starting...........'
    httpPort=9000
    contextPath=''
    scanIntervalSeconds= 30
    reload="automatic"
    stopPort=9090
    stopKey='foo'
}
jettyRun.dependsOn('jettyStop')
jettyStop {
    println 'stop jetty.....'
    stopPort=9090
    stopKey='foo'
}
watch {
    java {
        files files('src/main/java')
        tasks 'compileJava'
    }
    resources {
        files fileTree(dir: 'src/main/resources', include: ['**/*.xml','**/*.properties'])
        tasks 'processResources'
    }
}




//定义包装器
task wrapper(type: Wrapper){
    gradleVersion=2.14
}

//定义版本信息
class ProjectVersion{
    Integer major;
    Integer minor;
    Boolean release;
    ProjectVersion(Integer major,Integer minor){
        this.major = major;
        this.minor = minor;
    }
    ProjectVersion(Integer major,Integer minor,Boolean release){
        this.major = major;
        this.minor = minor;
        this.release = release;
    }
    String toString(){
        "$major.$minor${release?'':'-SNAPSHOT'}";
    }
}
task reloadVersion{
    project.version = readVersion()
}
ProjectVersion readVersion(){
    def versionFile = file("version.properties");
    logger.quiet 'read the version file';
    if(!versionFile.exists()){
        throw new GradleException("Required version file does not exist:$versionFile.canoncalPath")
    }
    Properties versionProps = new Properties();
    versionFile.withInputStream{stream -> versionProps.load(stream)}
    new ProjectVersion(versionProps.major.toInteger(),
            versionProps.minor.toInteger(),versionProps.release.toBoolean()
    );
}

task libs(type: Sync) {
    from configurations.runtime
    into "$buildDir/libs"
}

task mybatis << {
    println  'start excute mybatis'
    println "$buildDir"
    ant.taskdef(name: 'genfiles', classname: 'org.mybatis.generator.ant.GeneratorAntTask' ){
        classpath {
            fileset(dir: "$buildDir/libs", includes: '*.jar')
        }
    }
    ant.genfiles(overwrite: 'true', configfile : "$projectDir/src/main/resources/generatorConfig.xml" , verbose: 'true')
}
tasks.mybatis.dependsOn "libs"